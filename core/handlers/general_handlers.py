from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from ..google_sheets import customer_sheet, seller_sheet, link_sheet

from ..keyboards.inline import *
from ..keyboards.reply import *

from core.handlers.user_levels.admin_user import Admin
from core.handlers.user_levels.seller_user import Seller
from core.handlers.user_levels.customer_user import Customer

from core.settings import settings

#–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–¢–æ–∫–µ–Ω –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
def check_and_activate_token(token):
    records = link_sheet.get_all_records()
    for i, row in enumerate(records):
        if row["link_id"] == token and row["status"] == "unused":
            link_sheet.update_cell(i + 2, 2, "used")
            return True
    return False

#–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def starting_work(message: Message, state: FSMContext):
    #–ê–¥–º–∏–Ω
    if message.from_user.id == settings.bots.admin_id:
        await state.set_state(Admin.admin_start)
        await message.answer(f"üîß –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\
                         \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=admin_start_kb)
    #–ü—Ä–æ–¥–∞–≤–µ—Ü —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ (–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
    elif str(message.from_user.id) in seller_sheet.col_values(1):
        await state.set_state(Seller.seller_start)
        await message.answer(f"üíº –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, –ø—Ä–æ–¥–∞–≤–µ—Ü!\
                         \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=seller_start_kb)
    else:
        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ /start (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–æ–±—É—é —Å—Å—ã–ª–∫—É)
        args = message.text.split(maxsplit=1)
        if len(args) > 1 and message.text != 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫':
            token = args[1]
            #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            if check_and_activate_token(token):
                seller_sheet.append_row([message.from_user.id])
                await state.set_state(Seller.seller_start)
                await message.answer(f"üíº –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, –ø—Ä–æ–¥–∞–≤–µ—Ü!\
                         \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=seller_start_kb)
            #–¢–æ–∫–µ–Ω –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω
            else:
                await message.answer("‚ö†Ô∏è –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
        #–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
        else:
            await state.set_state(Customer.customer_start)   
            if str(message.from_user.id) not in customer_sheet.col_values(1):
                customer_sheet.append_row([message.from_user.id])
            await message.answer(f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\
                         \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=customer_start_kb)
    