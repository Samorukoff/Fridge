import asyncio
from datetime import datetime

from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from ...google_sheets import feed_sheet, cart_sheet, request_sheet

from ..user_levels.customer_user import Customer

from ...keyboards.inline import *
from ...keyboards.reply import *

class Cart(StatesGroup):
    cart = State()
    choose_quantity = State()

#–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ
async def show_cart(message: Message, state: FSMContext):

    user_id = message.from_user.id
    await state.update_data(user_id = user_id)
    feed_data = feed_sheet.get_all_records()
    cart_data = cart_sheet.get_all_records()[::-1]

    row = next((r for r in cart_data if str(r.get("customer_id")) == str(user_id)), None)
    if row:
        await state.set_state(Cart.cart)
    else:
        await message.answer('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', reply_markup=customer_start_kb)
        return

    #–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã, –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–≤–æ–∞—Ä–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É
    order_cards = []
    for cart_row in cart_data:
        if str(cart_row.get("customer_id")) == str(user_id):
            product_id = cart_row.get("product_id")
            quantity = cart_row.get("quantity")
            total_price = float(cart_row.get("total_price"))
            order_pick_date = cart_row.get("order_pick_date")
            for feed_row in feed_data:
                if str(feed_row.get("product_id")) == str(product_id):
                    name = feed_row.get("name")
                    description = feed_row.get("description")
                    photo_id = feed_row.get("photo_id")
                    product_unit = feed_row.get("product_unit")
                    price = feed_row.get("price")
                    availability = feed_row.get("availability")
        
                    caption = (
                        f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {name}\n"
                        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                        f"<b>–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {order_pick_date}\n"
                        f"<b>–û–±—ä–µ–º –∑–∞–∫–∞–∑–∞:</b> {quantity} {product_unit}\n"
                        f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {total_price:.2f}‚ÇΩ"
                    )

                    order_card = await message.answer_photo(photo=photo_id, caption=caption,
                                            reply_markup=edit_cart_kb(product_id, availability, price),
                                            parse_mode="HTML")
                    
                    order_cards.append(order_card)
                    break
    await state.update_data(order_cards=order_cards)
    await message.answer('üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É!', reply_markup=customer_cart_kb)

#–í—ã—Ö–æ–¥ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def close_cart(message: Message, state: FSMContext):
    data = await state.get_data()
    order_cards = data.get('order_cards', [])[::-1]
    await message.answer('üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', reply_markup=customer_start_kb)
    for card in order_cards:
        await card.delete()
    await state.clear()
    await state.set_state(Customer.customer_start)

#–î–æ—Å—Ç–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ID, –∫–æ–ª-–≤–∞ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ –∏ —Ü–µ–Ω—ã,
#–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫–æ–ª-–≤–∞ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞
async def edit_cart_item_quantity(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    work_piece = callback.data.split(":")[1]
    product_id, availability, price = work_piece.split(",")

    await state.set_state(Cart.choose_quantity)
    tech_msg = await callback.message.answer ('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞.',
                                                     reply_markup=cancel_kb)
    await state.update_data(tech_msg=tech_msg, product_id=product_id,
                            availability=availability, price=price)
    
#–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª-–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
async def back_to_cart(message: Message, state:FSMContext):
    await state.set_state(Cart.cart)
    data = await state.get_data()
    tech_msg = data.get('tech_msg')
    await message.delete()
    await tech_msg.delete()
    
#–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–æ–¥–∏–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É
async def write_new_quantity(message: Message, state: FSMContext):

    #–î–æ—Å—Ç–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    data = await state.get_data()
    user_id = data.get('user_id')
    product_id = data.get('product_id')
    availability = int(data.get('availability'))
    price = float(data.get('price'))

    #–ü—Ä–æ–≤–µ—Ä–∫–∞
    if not message.text.isdigit():
        msg = await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
        await asyncio.sleep(3)
        await message.delete()
        await msg.delete()
        return
    
    quantity = int(message.text)
    if quantity < 1 or quantity > availability:
        msg = await message.answer (f'‚ùå –í –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ {availability} –µ–¥. —Ç–æ–≤–∞—Ä–∞')
        await asyncio.sleep(3)
        await message.delete()
        await msg.delete()
        return

    cart_data = cart_sheet.get_all_records()

    #–ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, –∏ –≤–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    row = next((r for r in cart_data if str(r.get("customer_id")) == str(user_id)
                and str(r.get("product_id")) == str(product_id)), None)
    if row:
        total_price = float(price) * float(quantity)
        total_price = "{:.2f}".format(total_price)

        old_quantity = row.get("quantity")

        #–ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ GoogleSheets
        row_index = cart_data.index(row) + 2  #+2, –ø–æ—Ç–æ–º—É —á—Ç–æ get_all_records() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞

        #–û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –≤ Google Sheets
        cart_sheet.update_cell(row_index, 3, quantity)
        cart_sheet.update_cell(row_index, 4, total_price)

        #–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª-–≤–æ –≤ –ª–µ–Ω—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤
        feed_data = feed_sheet.get_all_records()
        availability_row_index = next(
            (i + 2 for i, r in enumerate(feed_data) if str(r.get("product_id")) == str(product_id)),
            None
        )
        feed_sheet.update_cell(availability_row_index, 7, availability - (quantity - old_quantity))
    
    else:
        msg = await message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ!')
        await asyncio.sleep(3)
        await msg.delete()
        return

    #–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ—Ä–∑–∏–Ω—É
    order_cards = data.get('order_cards', [])[::-1]
    await message.answer('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É', reply_markup=customer_start_kb)
    for card in order_cards:
        await card.delete()
    await state.clear()
    await state.set_state(Customer.customer_start)

#–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def delete_cart_item(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    product_id = callback.data.split(":")[1]
    user_id = callback.from_user.id

    cart_data = cart_sheet.get_all_records()

    #–ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –∏ —É–¥–∞–ª—è–µ–º –µ–µ
    row = next((r for r in cart_data if str(r.get("customer_id")) == str(user_id)
                and str(r.get("product_id")) == str(product_id)), None)
    if row:
        row_index = cart_data.index(row) + 2
        cart_sheet.delete_rows(row_index)
        await callback.message.delete()
        data = await state.get_data()
        order_cards = data.get('order_cards')
        order_cards = [
            msg for msg in order_cards if msg.message_id != callback.message.message_id
        ]
        await state.update_data(order_cards=order_cards)

        #–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª-–≤–æ –≤ –ª–µ–Ω—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤
        feed_data = feed_sheet.get_all_records()
        availability_row_index = next(
            (i + 2 for i, r in enumerate(feed_data) if str(r.get("product_id")) == str(product_id)),
            None
        )
        quantity = row.get("quantity")
        availability = feed_sheet.cell(availability_row_index, 7).value
        feed_sheet.update_cell(availability_row_index, 7, int(availability) + int(quantity))

        msg = await callback.message.answer('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!', reply_markup=customer_start_kb)
        await asyncio.sleep(3)
        await msg.delete()
    else:
        msg = await callback.message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ!')
        await asyncio.sleep(3)
        await msg.delete()
        return

#–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def purchase(message: Message, state: FSMContext):
    user_id = message.from_user.id

    cart_data = cart_sheet.get_all_records()

    #–ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    rows_to_delete = [
        i + 2
        for i, row in enumerate(cart_data)
        if str(row.get("customer_id")) == str(user_id)
    ]

    #–ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –≤—ã—Ö–æ–¥–∏–º
    if not rows_to_delete:
        msg = await message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã!')
        await asyncio.sleep(3)
        await msg.delete()
        return

    #–ü–µ—Ä–µ–Ω–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞—è–≤–æ–∫
    user_cart_rows = [
        row for row in cart_data
        if str(row.get("customer_id")) == str(user_id)
    ]
    
    now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

    for row in user_cart_rows:
        row["product_name"] = next(str(r.get("name")) for r in feed_sheet.get_all_records()
                           if str(r.get("product_id")) == str(row.get("product_id")))
        row["order_time"] = now
        request_sheet.append_row(list(row.values()))

    #–£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    for row_index in sorted(rows_to_delete, reverse=True):
        cart_sheet.delete_rows(row_index)

    #–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ—Ä–∑–∏–Ω—É
    data = await state.get_data()
    order_cards = data.get('order_cards', [])[::-1]
    await message.answer('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É', reply_markup=customer_start_kb)
    for card in order_cards:
        await card.delete()
    await state.clear()
    await state.set_state(Customer.customer_start)