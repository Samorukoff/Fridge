import asyncio

from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from ..google_sheets import feed_sheet, cart_sheet
from ..keyboards.inline import *
from ..keyboards.reply import *

class ProductFeed(StatesGroup):
    product_feed = State()
    choose_quantity = State()

#–ß–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–æ–≤, –≤—ã–≤–æ–¥–∏–º—ã—Ö –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
ITEMS_PER_PAGE = 7

#–í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
async def show_feed (message: Message, state: FSMContext):

    #–õ–µ–Ω—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —Å –Ω—É–ª—è, –∏–ª–∏ –º—ã –¥–æ–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã?
    if message.text == 'üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–Ω—Ç—É —Ç–æ–≤–∞—Ä–æ–≤':
        #–í—ã—Ö–æ–¥ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        data = await state.get_data()
        order_cards = data.get('order_cards', [])[::-1]
        for card in order_cards:
            await card.delete()
            await state.clear()
        await state.set_state(ProductFeed.product_feed)
        is_new_request = True
    elif message.text == 'üîΩ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ':
        is_new_request = False
    else:
         return
    
    #–°–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    data = await state.get_data()
    product_cards = data.get('product_cards', [])

    #–ï—Å–ª–∏ –º—ã –¥–æ–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–∞–º, –≥–¥–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏
    feed_data = feed_sheet.get_all_records()[::-1]
    data = await state.get_data()
    offset = 0 if is_new_request else data.get('offset', 0)
    items = feed_data[offset:offset + ITEMS_PER_PAGE]

    #–¢–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    if not items:
        msg = await message.answer("‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç")
        await asyncio.sleep(3)
        await message.delete()
        await msg.delete()
        return
    
    #–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤, –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –ø–æ—Ä—è–¥–∫—É
    for row in items:
            product_id = row.get("product_id")
            name = row.get("name")
            description = row.get("description")
            photo_id = row.get("photo_id")
            date_placement = row.get("date_placement")
            delivery_time = row.get("delivery_time")
            product_unit = row.get("product_unit")
            availability = row.get("availability")
            price = row.get("price")

            caption = (
                f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {name}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                f"<b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> {date_placement}\n"
                f"<b>–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_time}\n"
                f"<b>–ï–¥–∏–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞:</b> {product_unit}\n"
                f"<b>–ù–∞–ª–∏—á–∏–µ:</b> {availability}\n"
                f"<b>–¶–µ–Ω–∞:</b> {price}"
            )

            product_card = await message.answer_photo(photo=photo_id, caption=caption,
                                    reply_markup=add_to_cart_kb(product_id, availability, price),
                                    parse_mode="HTML")
            
            product_cards.append(product_card)
    await state.update_data(product_cards=product_cards)

    #–§–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –≤—ã–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–≤–æ–¥–∞
    new_offset = offset + ITEMS_PER_PAGE
    await state.update_data(offset=new_offset)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ï—â–µ", –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
    if new_offset < len(feed_data):
        await message.answer("üîΩ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä—ã?", reply_markup=feed_kb)
    elif new_offset >= len(feed_data):
        await message.answer("‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç", reply_markup=feed_kb)

#–í—ã—Ö–æ–¥ –∏–∑ –ª–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
async def close_feed(message: Message, state: FSMContext):
    data = await state.get_data()
    product_cards = data.get('product_cards',[])[::-1]
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', reply_markup=start_kb)
    for card in product_cards:
        await card.delete()
    await state.clear()

#–î–æ—Å—Ç–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ID, –∫–æ–ª-–≤–∞ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ –∏ —Ü–µ–Ω—ã,
#–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª-–≤–∞ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞
async def write_to_cart(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    work_piece = callback.data.split(":")[1]
    product_id, availability, price = work_piece.split(",")
    user_id = callback.from_user.id

    cart_data = cart_sheet.get_all_records()
    row = next((r for r in cart_data if str(r.get("customer_id")) == str(user_id)
                and str(r.get("product_id")) == str(product_id)), None)
    if row:
        msg = await callback.message.answer('‚ùå –¢–æ–≤–∞—Ä —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–∑–∏–Ω–µ!')
        await asyncio.sleep(3)
        await msg.delete()
        return

    await state.set_state(ProductFeed.choose_quantity)
    tech_msg = await callback.message.answer('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞.',
                                                     reply_markup=cancel_pick_kb)
    await state.update_data(tech_msg=tech_msg, product_id=product_id,
                            availability=availability, price=price, user_id=user_id)

#–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
async def back_to_feed(message: Message, state:FSMContext):
    await state.set_state(ProductFeed.product_feed)
    data = await state.get_data()
    tech_msg = data.get('tech_msg')
    await message.delete()
    await tech_msg.delete()

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É (–∫–æ—Ä–∑–∏–Ω—É)
async def add_to_cart(message: Message, state:FSMContext):

    #–î–æ—Å—Ç–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    data = await state.get_data()
    user_id = data.get('user_id')
    product_id = data.get('product_id')
    availability = int(data.get('availability'))
    price = float(data.get('price'))

    #–ü—Ä–æ–≤–µ—Ä–∫–∞
    if not message.text.isdigit():
        msg = await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
        await asyncio.sleep(3)
        await message.delete()
        await msg.delete()
        return
    
    quantity = int(message.text)
    if quantity < 1 or quantity > availability:
        msg = await message.answer (f'‚ùå –í –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ {availability} –µ–¥. —Ç–æ–≤–∞—Ä–∞')
        await asyncio.sleep(3)
        await message.delete()
        await msg.delete()
        return
    
    total_price = float(price) * float(quantity)
    total_price = "{:.2f}".format(total_price)

    #–ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É (–∫–æ—Ä–∑–∏–Ω—É)
    cart_sheet.append_row([user_id, product_id, quantity, total_price])
    await message.answer('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ', reply_markup=feed_kb)
    await state.set_state(ProductFeed.product_feed)